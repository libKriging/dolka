% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kmStuff.R
\name{predict.km}
\alias{predict.km}
\title{Predicted values, confidence intervals}
\usage{
\method{predict}{km}(
  object,
  newdata,
  type,
  se.compute = TRUE,
  cov.compute = FALSE,
  light.return = FALSE,
  bias.correct = FALSE,
  checkNames = TRUE,
  deriv = FALSE,
  ...
)
}
\arguments{
\item{object, newdata, type}{see \code{\link[DiceKriging]{predict.km}}.}

\item{se.compute, cov.compute}{see \code{\link[DiceKriging]{predict.km}}.}

\item{light.return, bias.correct}{see \code{\link[DiceKriging]{predict.km}}.}

\item{checkNames}{see \code{\link[DiceKriging]{predict.km}}.}

\item{deriv}{Logical. If \code{TRUE} further elements are added to
the returned list, all concerning the the derivatives.}

\item{...}{Not used yet.}
}
\value{
A list with the elements of \code{\link[DiceKriging]{predict.km}}
plus the following elements that relate to the derivatives w.r.t. the input 
\itemize{
\item{\code{trend.deriv} }{Derivative of the trend component.}
\item{\code{mean.deriv} }{Derivative of the kriging mean.}
\item{\code{s2.deriv} }{Derivative of the kriging variance.}
}
}
\description{
.. content for \description{} (no empty lines) ..
}
\details{
.. content for \details{} ..
}
\examples{
## a 16-points factorial design, and the corresponding response
d <- 2; n <- 16
fact.design  <- expand.grid(x1 = seq(0, 1, length = 4), x2 = seq(0, 1, length = 4))
branin.resp <- apply(fact.design, 1, branin)
## kriging model 1 : gaussian covariance structure, no trend,
##                   no nugget effect
myKm <- km(~1 + x1 + x2, design=fact.design, response=branin.resp, covtype="gauss")
## predicting at testdata points
testdata <- expand.grid(x1 = s <- seq(0, 1, length = 15), x2 = s)
pred <- predict(myKm, newdata = testdata[10, ], type = "UK", deriv = TRUE)
newdata <- testdata[10, ]
c.newdata <- covMat1Mat2(object = myKm@covariance,
                         X1 = myKm@X, X2 = matrix(newdata, nrow = 1),
                         nugget.flag = myKm@covariance@nugget.flag)
covVector.dx(x = newdata, X = myKm@X, object = myKm@covariance, c = c.newdata)
trend.deltax(x = newdata, model = myKm)

}
